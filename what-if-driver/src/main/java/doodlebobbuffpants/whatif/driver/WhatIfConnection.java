package doodlebobbuffpants.whatif.driver;

import doodlebobbuffpants.whatif.driver.exception.WhatIfConnectionException;
import doodlebobbuffpants.whatif.driver.exception.WhatIfSchemaException;
import doodlebobbuffpants.whatif.driver.exception.WhatIfWriterException;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.experimental.Delegate;

import java.io.IOException;
import java.sql.*;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

import static doodlebobbuffpants.whatif.driver.exception.ExceptionUtils.append;

public class WhatIfConnection implements Connection {
    @Delegate(types = Connection.class, excludes = ConnectionDelegateExclusion.class)
    @Getter(AccessLevel.PACKAGE)
    private final Connection wrappedConnection;
    private final WhatIfWriter writer;
    private final Map<InterceptProperty, String> intercepts;
    private boolean open;

    public WhatIfConnection(String url, Properties info, String filename) {
        try {
            this.wrappedConnection = DriverManager.getConnection(url.replace("jdbc:whatif:", "jdbc:"), info);
        } catch (SQLException e) {
            throw new WhatIfConnectionException(url, e);
        }
        this.writer = new WhatIfWriter(filename);
        this.intercepts = new HashMap<>();
        this.open = true;
    }

    @Override
    public Statement createStatement() throws SQLException {
        return new WhatIfStatement(writer, this);
    }

    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return new WhatIfPreparedStatement(writer, this, sql);
    }

    @Override
    public CallableStatement prepareCall(String sql) throws SQLException {
        return new WhatIfCallableStatement(writer, this, sql);
    }

    @Override
    public void close() {
        RuntimeException toThrow = null;
        try {
            wrappedConnection.close();
        } catch (SQLException e) {
            toThrow = new RuntimeException(e);
        }
        try {
            writer.close();
        } catch (WhatIfWriterException e) {
            toThrow = append(toThrow, e);
        }
        open = false;
        if (toThrow != null) throw toThrow;
    }

    @Override
    public boolean isClosed() {
        return !open;
    }

    @Override
    public DatabaseMetaData getMetaData() throws SQLException {
        return new WhatIfDatabaseMetaData(wrappedConnection.getMetaData(), this);
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        return createStatement();
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return prepareStatement(sql);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return prepareCall(sql);
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return createStatement();
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return prepareStatement(sql);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return prepareCall(sql);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        return prepareStatement(sql);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        return prepareStatement(sql);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        return prepareStatement(sql);
    }

    @Override
    public boolean isValid(int timeout) throws SQLException {
        return open && wrappedConnection.isValid(timeout);
    }

    @Override
    public void setSchema(String schema) {
        try {
            writer.writeLine("-- SETTING SCHEMA TO '" + schema + "'");
        } catch (IOException e) {
            throw new WhatIfSchemaException(e);
        }
        intercepts.put(InterceptProperty.SCHEMA, schema);
    }

    @Override
    public String getSchema() throws SQLException {
        return intercepts.getOrDefault(InterceptProperty.SCHEMA, wrappedConnection.getSchema());
    }

    @Override
    public void abort(Executor executor) {
        close();
    }

    private enum InterceptProperty {
        SCHEMA
    }

    @SuppressWarnings("unused")
    private interface ConnectionDelegateExclusion {
        Statement createStatement() throws SQLException;
        PreparedStatement prepareStatement(String sql) throws SQLException;
        CallableStatement prepareCall(String sql) throws SQLException;
        DatabaseMetaData getMetaData() throws SQLException;
        void close() throws SQLException;
        boolean isClosed() throws SQLException;
        Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException;
        PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException;
        CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException;
        Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException;
        PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException;
        CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException;
        PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException;
        PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException;
        PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException;
        boolean isValid(int timeout) throws SQLException;
        void setSchema(String schema) throws SQLException;
        String getSchema() throws SQLException;
        void abort(Executor executor) throws SQLException;
    }
}
